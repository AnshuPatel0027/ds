import collections
# create a list of discrete values
values = [2, 4, 3, 4, 5, 2, 2, 1, 3, 4, 5, 5, 4, 2]
# construct a frequency distribution using collections.Counter
freq_dist = collections.Counter(values)
# print the frequency distribution
for value, freq in freq_dist.items():
 print(f"Value: {value}, Frequency: {freq}") 



 import numpy as np
values = np.random.rand(100)
bin_edges = np.linspace(values.min(), values.max(), 10)
freq_dist, _ = np.histogram(values, bins=bin_edges)
for i, freq in enumerate(freq_dist):
 print(f"Bin {i+1}: [{bin_edges[i]:.2f}, {bin_edges[i+1]:.2f}), Frequency:
{freq}") 



def find_mean(list_of_numbers):
 return sum(list_of_numbers) / len(list_of_numbers)
def find_median(list_of_numbers):
 list_of_numbers.sort()
 length = len(list_of_numbers)
 length_is_odd = True if length % 2 == 0 else False
 if length_is_odd:
 index = length//2
 median = list_of_numbers[index]
 else:
 index_1 = length//2
 index_2 = index_1 + 1
 median = (list_of_numbers[index_1] + list_of_numbers[index_2]) / 2
 return median
def calculate_mode(list_of_numbers):
 counter = {}
 for i in list_of_numbers:
 if i in counter:
 counter[i]+=1
 else:
 counter[i] = 1
 key_max = sorted(counter, key=counter.get, reverse=True)[:1][0]
 frequency = counter[key_max]
 return key_max, frequency
def find_range(list_of_numbers):
 n_min = min(list_of_numbers)
 n_max = max(list_of_numbers)
 n_range = n_max - n_min
 return n_min, n_max, n_range
def find_variance(list_of_numbers, var_type):
 valid_var_types = ['sample', 'population']
 if var_type not in valid_var_types:
 raise ValueError(f'Incorrect argument for variance type passed: {var_type}!
Allowed values "sample" or "population"')
 seq_length = len(list_of_numbers)-1 if var_type == 'sample' else
len(list_of_numbers)
 mean = find_mean(list_of_numbers)
 differences = [number-mean for number in list_of_numbers]
 squared_differences = [x**2 for x in differences]
 variance = sum(squared_differences) / seq_length
 return variance
def find_standard_deviation(list_of_numbers, var_type):
 variance = find_variance(list_of_numbers, var_type)
 std = variance ** 0.5
 return std 
# Example usage:
numbers = [4,10,29,33,42,67]
print("Mean:", find_mean(numbers))
print("Median:", find_median(numbers))
mode, freq = calculate_mode(numbers)
print("Mode:", mode)
print("Frequency of mode:", freq)
print("Range:", find_range(numbers))
print("Variance (sample):", find_variance(numbers, 'sample'))
print("Variance (population):", find_variance(numbers, 'population'))
print("Standard deviation (sample):", find_standard_deviation(numbers, 'sample'))
print("Standard deviation (population):", find_standard_deviation(numbers, 'population'))




import numpy as np
import pandas as pd
data = pd.Series(np.random.normal(size=100))
summary_stats = data.describe()
skewness = data.skew()
kurtosis = data.kurt()
print("Summary statistics:")
print(summary_stats)
print("\nSkewness: ", skewness)
print("\nKurtosis: ", kurtosis) 




